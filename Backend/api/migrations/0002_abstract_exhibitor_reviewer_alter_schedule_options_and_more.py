# Generated by Django 5.0.6 on 2024-06-05 12:12

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Abstract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=100)),
                ('content_text', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('under_review', 'Under Review'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('awaiting_full_submission', 'Awaiting Full Submission')], default='submitted', max_length=30)),
                ('document', models.FileField(blank=True, null=True, upload_to='abstracts/')),
                ('abstract_image', models.ImageField(blank=True, null=True, upload_to='abstract_images/')),
                ('content_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'DOC'), ('jpeg', 'JPEG'), ('png', 'PNG'), ('mp4', 'MP4'), ('txt', 'Txt')], default='text', max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Exhibitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('description', models.TextField()),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('social_media_link', models.URLField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='exhibitor_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Reviewer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('expertise', models.CharField(max_length=100)),
                ('rating', models.FloatField(default=0)),
                ('status', models.CharField(choices=[('free', 'Free'), ('busy', 'Busy')], default='free', max_length=20)),
                ('total_reviews_completed', models.PositiveIntegerField(default=0)),
                ('banner', models.ImageField(blank=True, null=True, upload_to='reviewer_profile/')),
                ('affiliation', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.AlterModelOptions(
            name='schedule',
            options={'ordering': ['date', 'start_time']},
        ),
        migrations.AddField(
            model_name='schedule',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='event_schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_schedules', to='api.event'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='format',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='location',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='moderator',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='notes',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='objectives',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='schedule',
            name='title',
            field=models.CharField(blank=True, max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='speaker',
            name='bio',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='speaker',
            name='email',
            field=models.EmailField(blank=True, max_length=254, null=True),
        ),
        migrations.AddField(
            model_name='speaker',
            name='expertise',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='speaker',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='speaker_images/'),
        ),
        migrations.AddField(
            model_name='speaker',
            name='phone_number',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
        migrations.AddField(
            model_name='speaker',
            name='status',
            field=models.CharField(blank=True, choices=[('FREE', 'Free'), ('BUSY', 'Busy')], max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='agreement_signed',
            field=models.BooleanField(default=False, verbose_name='Agreement_level'),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='contact_email',
            field=models.EmailField(blank=True, max_length=254, null=True),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='contact_phone',
            field=models.CharField(blank=True, max_length=15, null=True),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='logo',
            field=models.ImageField(blank=True, null=True, upload_to='sponsor_logos/'),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='packages',
            field=models.CharField(default='Gold-Inkind', max_length=255),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='website',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='speaker',
            name='role',
            field=models.CharField(blank=True, choices=[('PLENARY', 'Plenary Speaker'), ('INDUSTRY', 'Industry Speaker'), ('ACADEMIC', 'Academic Speaker'), ('INVITED', 'Invited Speaker'), ('LIGHT_TALKING', 'Light Talking Speaker')], max_length=50, null=True),
        ),
        migrations.CreateModel(
            name='ExhibitorBooth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('booth_number', models.PositiveIntegerField()),
                ('is_approved', models.BooleanField(default=False)),
                ('booth_size', models.CharField(blank=True, max_length=50, null=True)),
                ('staff_count', models.PositiveIntegerField(default=1)),
                ('amenities', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='booth_images/')),
                ('is_occupied', models.BooleanField(default=False)),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booths', to='api.exhibitor')),
            ],
        ),
        migrations.CreateModel(
            name='PhysicalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='physical_event_banners/')),
                ('date', models.DateTimeField()),
                ('location', models.CharField(max_length=200)),
                ('registration_start_date', models.DateTimeField(blank=True, null=True)),
                ('registration_end_date', models.DateTimeField(null=True)),
                ('registration_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('available_seat', models.IntegerField(blank=True, null=True)),
                ('event_type', models.CharField(choices=[('Conference', 'Conference'), ('Workshop', 'Workshop'), ('Seminar', 'Seminar'), ('Meetup', 'Meetup'), ('Lecture', 'Lecture'), ('Training', 'Training'), ('Networking', 'Networking'), ('Exhibition', 'Exhibition'), ('Competition', 'Competition'), ('Webinar', 'Webinar'), ('Party', 'Party'), ('Festival', 'Festival'), ('Concert', 'Concert'), ('Trade Show', 'Trade Show'), ('Launch Event', 'Launch Event'), ('Social Event', 'Social Event'), ('Sports Event', 'Sports Event'), ('Charity Event', 'Charity Event'), ('Fundraiser', 'Fundraiser'), ('Panel Discussion', 'Panel Discussion'), ('Virtual Event', 'Virtual Event'), ('Gala', 'Gala'), ('Retreat', 'Retreat')], default='Conference', max_length=20)),
                ('organizer_name', models.CharField(blank=True, max_length=100, null=True)),
                ('organizer_contact', models.CharField(blank=True, max_length=100, null=True)),
                ('target_audience', models.CharField(blank=True, max_length=200, null=True)),
                ('keywords', models.CharField(blank=True, max_length=200, null=True)),
                ('event_status', models.CharField(choices=[('Scheduled', 'Scheduled'), ('Postponed', 'Postponed'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed')], default='Scheduled', max_length=20)),
                ('speakers', models.ManyToManyField(related_name='events', to='api.speaker')),
                ('sponsors', models.ManyToManyField(related_name='events', to='api.sponsor')),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('image', models.ImageField(blank=True, null=True, upload_to='content_images/')),
                ('contents', models.FileField(blank=True, null=True, upload_to='contact_file/')),
                ('description', models.TextField()),
                ('tag', models.CharField(max_length=50)),
                ('download_content', models.URLField(blank=True, null=True)),
                ('content_type', models.CharField(choices=[('PDF', 'PDF Document'), ('PPT', 'PowerPoint Presentation'), ('MP3', 'MP3 Audio'), ('MP4', 'MP4 Video'), ('DOC', 'Word Document'), ('TXT', 'Text File'), ('IMG', 'Image')], default='PDF', max_length=3)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('contents_events', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_events', to='api.physicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='Agenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('description', models.TextField()),
                ('event_order', models.PositiveIntegerField()),
                ('moderator', models.CharField(blank=True, max_length=200, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='agenda_images/')),
                ('Speakers_agnda', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='speakers_agnda', to='api.speaker')),
                ('events', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agenda_events', to='api.physicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comments', models.TextField()),
                ('rating', models.IntegerField()),
                ('reviewed_at', models.DateTimeField(auto_now_add=True)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('feedback', models.TextField(blank=True)),
                ('clarity_and_coherence', models.PositiveSmallIntegerField(default=0)),
                ('relevance', models.PositiveSmallIntegerField(default=0)),
                ('originality_and_innovation', models.PositiveSmallIntegerField(default=0)),
                ('methodology', models.PositiveSmallIntegerField(default=0)),
                ('significance', models.PositiveSmallIntegerField(default=0)),
                ('conclusions', models.PositiveSmallIntegerField(default=0)),
                ('accuracy_and_validity', models.PositiveSmallIntegerField(default=0)),
                ('conciseness', models.PositiveSmallIntegerField(default=0)),
                ('language_and_style', models.PositiveSmallIntegerField(default=0)),
                ('abstract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.abstract')),
                ('reviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.reviewer')),
            ],
        ),
        migrations.AddField(
            model_name='abstract',
            name='reviewer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='api.reviewer'),
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('moderator', models.CharField(blank=True, max_length=200, null=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=200, null=True)),
                ('format', models.CharField(blank=True, max_length=200, null=True)),
                ('objectives', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='sessions_images/')),
                ('event_sessions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events_sessions', to='api.physicalevent')),
                ('speakers', models.ManyToManyField(blank=True, related_name='speakers_sessions', to='api.speaker')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField()),
                ('interests', models.TextField()),
                ('comment', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('flagged', models.BooleanField(default=False)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.session')),
            ],
        ),
        migrations.CreateModel(
            name='ShowcaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity_available', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('available', 'Available'), ('sold', 'Sold'), ('on_process', 'On Process'), ('not_on_market', 'Not On Market')], default='available', max_length=15)),
                ('sold_at', models.DateTimeField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='showcase_item_images/')),
                ('exhibitor_booth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='showcase_items', to='api.exhibitorbooth')),
            ],
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('capacity', models.IntegerField(default=100)),
                ('facilities', models.TextField(default=None)),
                ('number_of_rooms', models.IntegerField(default=1)),
                ('is_accessible', models.BooleanField(default=True)),
                ('parking', models.BooleanField(default=False)),
                ('contact_person_name', models.CharField(max_length=255)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=20)),
                ('package_deals', models.TextField(blank=True, null=True)),
                ('nearby_accommodations', models.BooleanField(default=False)),
                ('image', models.ImageField(blank=True, null=True, upload_to='venue_images/')),
                ('discount', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('rent_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('event_venues', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_venues_choice', to='api.physicalevent')),
            ],
        ),
        migrations.CreateModel(
            name='Sponsorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sponsorship_type_and_level', models.CharField(blank=True, choices=[('Gold - Financial', 'Gold - Financial'), ('Silver - Financial', 'Silver - Financial'), ('Bronze - Financial', 'Bronze - Financial'), ('Platinum - Financial', 'Platinum - Financial'), ('Diamond - Financial', 'Diamond - Financial'), ('Gold - In-kind', 'Gold - In-kind'), ('Silver - In-kind', 'Silver - In-kind'), ('Bronze - In-kind', 'Bronze - In-kind'), ('Platinum - In-kind', 'Platinum - In-kind'), ('Diamond - In-kind', 'Diamond - In-kind')], max_length=50, null=True, verbose_name='Sponsorship Type and Level')),
                ('fee', models.DecimalField(blank=True, decimal_places=2, help_text='Enter the amount paid for the sponsorship.', max_digits=10, null=True, verbose_name='Amount Paid')),
                ('agreement_signed', models.BooleanField(default=False, verbose_name='Agreement Signed')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('image', models.ImageField(blank=True, null=True, upload_to='sponsorship_images/', verbose_name='Sponsorship Image')),
                ('sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sponsorships', to='api.sponsor', verbose_name='Sponsor')),
            ],
            options={
                'verbose_name': 'Sponsorship',
                'verbose_name_plural': 'Sponsorships',
                'indexes': [models.Index(fields=['sponsorship_type_and_level'], name='api_sponsor_sponsor_c5079d_idx'), models.Index(fields=['start_date'], name='api_sponsor_start_d_325437_idx')],
            },
        ),
    ]
